function Vertex(inbound, outbound) {
    this.in = inbound || [];
    this.out = outbound || [];
    this.visited = false;
}

function addEdge(nodes, vertTail, vertHead) {
    if (!nodes.hasOwnProperty(vertTail)) {
        nodes[vertTail] = new Vertex(); // create vertex
    }
    nodes[vertTail].out.push(vertHead);//add pointer to another node
    if (!nodes.hasOwnProperty(vertHead)) {
        nodes[vertHead] = new Vertex();//create vertex to point to
    }
    nodes[vertHead].in.push(vertTail);// store a node pointing here
}

function nodesToEdgesArr(nodes) {
    const verts = Object.keys(nodes);
    const edges = [];
    for (var i = 0; i < verts.length; i++) {
        var vertLabel = parseInt(verts[i]);
        var outgoing = nodes[vertLabel].out;
        //taking only outgoing:
        for (var j = 0; j < outgoing.length; j++) {
            var outLabel = outgoing[j];
            edges.push([vertLabel, outLabel])
        }
    }
    return edges;
}

function reverseEdges(nodes) {
    const edges = nodesToEdgesArr(nodes);
    const nodesWithReversedEdges = {};
    for (var i = 0; i < edges.length; i++) {
        var edge = edges[i];
        // add edge reversed into new graph
        addEdge(nodesWithReversedEdges, edge[1], edge[0]);
    }
    return nodesWithReversedEdges;
}

function DFS(nodes, currentVertex) {
    currentVertex.visited=true;
    for(var i=0;i<currentVertex.out.length;i++){
        var outLabel=currentVertex.out[i];
        var out=nodes[outLabel];
        if(out.visited!==true){
            DFS(nodes, out);
        }
    }
}

function findSCC(nodes) {

}

module.exports = {
    Vertex: Vertex,
    findSCC: findSCC,
    addEdge: addEdge,
    nodesToEdgesArr: nodesToEdgesArr,
    reverseEdges: reverseEdges,
    DFS:DFS
};